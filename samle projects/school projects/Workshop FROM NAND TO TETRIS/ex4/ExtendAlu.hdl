/**

 * The input of the extends ALU is instruction[9] and x[16],y[16].

 * the output is define as follows:
 
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
 
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.

 * If instruction[7] equals 0 the output will be x*y and disregard the rest 
 
* of the instruction.

 * If instruction[8] equals 0 the output will be shift.

 * Then, if instruction[4] equals 0 it will return shift of y otherwise shift
 
* of x, moreover if instruction[5] equals 0 it will return shift right
 
* otherwise shift left.

**/


CHIP ExtendAlu {

     IN x[16], y[16], instruction[9];

     OUT out[16], zr, ng;

     

     PARTS:

	// The results of the ALU
	ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3], ny = instruction[2],
		f = instruction[1], no = instruction[0], out = aluOut, zr = aluZr, ng = aluNg);

	// The result of the multipication
	Mul(a = x, b = y, out = xTy);

	// The results of all possible shifting
	shiftLeft(in = x, out = shiftXL);
	shiftRight(in = x, out = shiftXR);
	shiftLeft(in = y, out = shiftYL);
	shiftRight(in = y, out = shiftYR);

	// Choosing the right output out of the possible ones
	Mux4Way16(a = shiftYR, b = shiftXR, c = shiftYL, d = shiftXL, sel = instruction[4..5], out = shiftOut);
	Mux4Way16(a = xTy, b = shiftOut, c = xTy,  d = aluOut, sel = instruction[7..8], out = out, out = checker);

	//zr and ng, from chips we built in project 2
	IsZero(in = checker, out = zr);
	IsNeg(in = checker, out = ng);
}