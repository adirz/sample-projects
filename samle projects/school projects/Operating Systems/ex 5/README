adirz, katyac
Adir Zagury (---------), katya Chirko (---------)
EX: 5

FILES:
README			- This file
Makefile		- Makefile to create the program
clftp.cpp		- The program to be run by the clients.
srftp.cpp		- The program to be run by the server.
utils.h			- Utilities.
performance.jpg	- The graph that depicts how well the program works.

ANSWERS:
Reliable file transfer protocol over UDP connection:
	Reliable shot message:
		A short message with fixed size whose total number of bits equal "1" is even.
		If the message has an even number of bit that are "1", the last bit is "0",
		otherwise the last bit is "1".
	Reliable long message:
		A long message with fixed size. Ends in a 'Reliable short message' - a count of "1" bits.
	Confirmation:
		Checking a long message is healthy in accordance to the above rules.
		return via 'Reliable short message'.
	Reliably sending data:
		sending a 'Reliable long message' out of port 'a' to port 'A' at server.
		While waiting 'Confirmation' on 'a', continuing the message out of 'b' into 'B' at server.
		and so on. If message failed, sending it again.
		
	Server side:
		Open a port to accept connection requests.
		Read messages coming in the port, interpret them as clients IP address and port.
		Open two port per client (distinguished by different IP) and send them to the given IP.
		Listens to message and returning confirmations. Overall message order is:
		We start with chunk number 0 to 'A', and 1 to 'B', with overall last chunk as 1.
		Every time a message succeeds we expect the next chunk to come out of it to be overall last
		chunk + 1.
	Client side:
		opens ports 'a' and 'b'. While no messages of where to connect is given send request
		containing your address and expected ports numbers.
		start 'Reliably sending data'.
	
	It is reliable because every time we get a message chunk it is checked to be healthy.
	It is efficient because there is no point at witch we wait for confirmation without action.
	so, as long it is not abused (and if so it can be encrypted) it is reliable and efficient.

	The main difference is that the data we are given is not always correct so we need to make sure
	of its health and order.
	

Performance evaluation of your program:
	The requested graph is provided.
	we checked with 100000 repetitions.
	All test including tests that didn't fit the scale:
	size (bytes)	time (nanoseconds)
	128				263
	1024			266
	4096			271
	16384			273
	65536			274
	262144			297
	1048576			544
	4194304			1648
	8388607			3314
	16777216		595772
	67108864		87920500
	as it can be seen it is efficient so that doubling the size doubles the time-
	It is constant data per time transfer.
	
	
