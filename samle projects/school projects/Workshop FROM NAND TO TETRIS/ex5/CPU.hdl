// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction.
 * 
 * instruction = 15->"i xx a cccccc ddd jjj"->0.
 * if instruction[15] = 0 
 *	A instruction:
 *	instruction[0..14] is a constant
 * else
 *	C instruction:
 *	instruction[6..12] code the comp part
 *	instruction[3..5] code the dest part
 *	instruction[0..5] code the jump part
 * 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	// A-instruction vs. C-instruction
	Not(in = instruction[15], out = isAInstr);
	And(a = instruction[15], b = instruction[15], out = isCInstr);

	//C-instruction
	//a (A vs M)
	And(a = isCInstr, b = instruction[12], out = selM);// selM = CInst[12]

	And(a = isCInstr, b = instruction[5], out = AIsDest);
	Or(a = isAInstr, b = AIsDest, out = loadA);// loadA = CInstOrA[5]
	And(a = isCInstr, b = instruction[4], out = loadD);// loadD = CInstOrA[4]

	And(a = instruction[11], b = isCInstr, out = zx);
	And(a = instruction[10], b = isCInstr, out = nx);
	Or(a = instruction[9], b = isAInstr, out = zy);
	Or(a = instruction[8], b = isAInstr, out = ny);
	And(a = instruction[7], b = isCInstr, out = f);
	And(a = instruction[6], b = isCInstr, out = no);



	//Set A register
	Mux16(a = ALUout, b = instruction, sel = isAInstr, out = Ain);
	ARegister(in = Ain, load = loadA, out = Aout);

	//Get M Or A
	Mux16(a = Aout, b = inM, sel = selM, out = AMout);

	//ALU
	ALU(x = Dout, y = AMout, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no,
		out = ALUout, out = outM, zr = zr, ng = ng);

	//D register
	DRegister(in = ALUout, load = loadD, out = Dout);

	Or(a = zr, b = ng, out = zrOrNg);
	Not(in = zrOrNg, out = pos);
	And16(a[0..2] = instruction[0..2], b[0] = pos, b[1] = zr, b[2] = ng, out[0..7] = jumpables);
	Or8Way(in = jumpables, out = jumpable);
	And(a = instruction[15], b = jumpable , out = jump);

	And(a = isCInstr, b = instruction[3], out = writeM);
	And16(a = Aout, b = Aout, out[0..14] = addressM);
	PC(in = Aout, inc = true, load = jump, reset = reset, out[0..14] = pc);
}